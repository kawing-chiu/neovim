global !p
from ultisnips_helpers import *
endglobal

priority 1

snippet shebang "shebang" b
#!/usr/bin/env python
endsnippet

snippet [ "[...]" i
[$1]
endsnippet

snippet ( "(...)" i
($1)
endsnippet

snippet < "<...>" i
<$1>
endsnippet

snippet aw "await" w
await $0
endsnippet

snippet as "async" w
async $0
endsnippet

snippet asw "async with" w
async with $0
endsnippet

snippet asf "async for" w
async for $0
endsnippet

snippet " "double quote" i
"$1"
endsnippet

snippet ' "single quote" i
'$1'
endsnippet

snippet ` "single backtick" i
\`$1\`
endsnippet

priority 2
snippet `` "double backtick" i
\`\`$1\`\`
endsnippet

priority 0
snippet f "f-string" w
f"$1"
endsnippet

priority 1

priority 2
snippet '': "dict entry" w
'$1': $1,
endsnippet

priority 1

snippet :meth ":meth: role" w
:meth:\`$1\`
endsnippet

snippet :cls ":class: role" w
:class:\`$1\`
endsnippet

snippet :obj ":obj: role" w
:obj:\`$1\`
endsnippet

## attrs
snippet @as "@attr.s" b
@attr.s
endsnippet

snippet ab "attr.ib()" w
attr.ib($1)
endsnippet

snippet post_init "__attrs_post_init__" b
def __attrs_post_init__(self):
	${0:pass}
endsnippet

## import and export

snippet i "import" b
import $0
endsnippet

snippet f "f-string" w
f"$1"
endsnippet

snippet l "lambda" w
lambda`!p
add_str_if(snip, t[1], " ")
refresh(snip)
`$1: $2
endsnippet

snippet inp "import numpy, pandas" b
import numpy as np
import pandas as pd
endsnippet

snippet inm "import numpy, matplotlib" b
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
endsnippet

snippet inpm "import numpy, pandas, matplotlib" b
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
endsnippet

snippet ipyside "pyside imports" b
from PySide import QtGui, QtCore
from PySide.QtCore import Qt
endsnippet

snippet ipyqt "pyqt5 imports" b
from PyQt5 import QtWidgets, QtCore

QtCore.Signal = QtCore.pyqtSignal
QtCore.Slot = QtCore.pyqtSlot
endsnippet

snippet fsql "from sqlalchemy import ..." b
from sqlalchemy import $0
endsnippet

snippet fsqlengine "from sqlalchemy import create_engine" b
from sqlalchemy import create_engine, text
endsnippet

snippet fsqlmeta "from sqlalchemy import MetaData etc" b
from sqlalchemy import MetaData, Table, Column
endsnippet


## convenient debug structures

snippet glb "globals()[...] = ..." b
globals()['$1'] = $1
endsnippet

snippet exit "sys.exit()" b
import sys; sys.exit()
endsnippet

snippet print_exc "traceback.print_exc()" b
import traceback
traceback.print_exc()
endsnippet

snippet p "print()" b
print($1)
endsnippet

snippet pr "print('...:', ...)" b
print("$1:", $1)
endsnippet

snippet pf "print(f'...')" b
print(f"$1")
endsnippet

snippet inn "is not None" w
is not None
endsnippet

snippet in "is None" w
is None
endsnippet

snippet isi "isinstance()" w
isinstance($1)
endsnippet

snippet iss "issubclass()" w
issubclass($1)
endsnippet

snippet pdb "pdb.set_trace()" b
import pdb; pdb.set_trace()
endsnippet

snippet ipdb "ipdb.set_trace()" b
import ipdb; ipdb.set_trace()
endsnippet

snippet pstack "traceback.print_stack()" b
import traceback; traceback.print_stack()
endsnippet

snippet htrace "hunter.trace()" b
import hunter; from hunter import Q
hunter.trace(Q(module_startswith='$1'))
endsnippet


## convenient logging functions

snippet li "log.info()" w
log.info($1)
endsnippet

snippet lw "log.warning()" w
log.warning($1)
endsnippet

snippet le "log.error()" w
log.error($1)
endsnippet

snippet lx "log.exception()" w
log.exception($1)
endsnippet

## language structures

snippet s. "self." w
self.$0
endsnippet

snippet s_ "self._" w
self._$0
endsnippet

snippet s.. "self.xxx = xxx" w
self.$1 = $1
endsnippet

priority 2
snippet ..s "xxx = self.xxx" w
$1 = self.$1
endsnippet

priority 1

snippet s__ "self._xxx = xxx" w
self._$1 = $1
endsnippet

priority 2
snippet __s "xxx = self._xxx" w
$1 = self._$1
endsnippet

priority 1

snippet re "return" b
return $0
endsnippet

snippet r "raise" b
raise $0
endsnippet

snippet rfn "raise ... from None" b
raise $1 from None
endsnippet

snippet rfe "raise ... from e" b
raise $1 from e
endsnippet

snippet t "try" b
try:$0
endsnippet

snippet e "except ..." b
except ${1:Exception}:
endsnippet

priority 2
snippet ee "except ... as e" b
except ${1:Exception} as e:
endsnippet

priority 1

snippet ifm "if main" bw
def main():
	${0:pass}


if __name__ == '__main__':
	main()
endsnippet

snippet ifma "if main with arg parsing" bw
def main(args):
	pass


def _add_args(parser):
	${1:pass}$0


def _parse_args():
	from argparse import ArgumentParser
	parser = ArgumentParser(description="")
	_add_args(parser)
	parser.set_defaults(func=main)
	args = parser.parse_args()
	return args, parser


if __name__ == '__main__':
	args, parser = _parse_args()
	if not hasattr(args, 'func'):
		parser.print_help()
	else:
		args.func(args)
endsnippet

snippet ifmc "if main with click" bw
@click.group()
def cli():
	pass


if __name__ == '__main__':
	cli()
endsnippet

snippet @cc "@cli.command" b
@cli.command()
endsnippet

snippet @co "@click.option" b
@click.option($1)
endsnippet

snippet @ca "@click.argument" b
@click.argument($1)
endsnippet

priority 2
snippet @as "@attr.s" b
@attr.s
endsnippet

priority 1

snippet add_argument "add argument to parser" b
parser.add_argument($1)
endsnippet

snippet add_subparsers "add subparsers to parser" b
subparsers = parser.add_subparsers(dest='${1:sub_cmd}')
endsnippet

snippet add_parser "add parser to subparsers" b
$1 = subparsers.add_parser('$2')
endsnippet

snippet doc "docstring" w
"""$1`!p
indent = get_indent(snip, shift=0)
prefix = '\n\n' + indent
add_str_if(snip, t[2], prefix)
`$2`!p
if not t[2]:
    suffix = '"""' 
else:
    suffix = '\n' + indent + '"""'
add_str(snip, suffix)
refresh(snip)
`
endsnippet

snippet gdoc "google-style docstring" b
"""$1`!p
indent = get_indent(snip, shift=0)
prefix = '\n\n' + indent
add_str_if(snip, t[2], prefix)
`$2`!p
add_str(snip, '\n')
`
Args:`!p
prefix = '\n' + get_indent(snip, shift=1)
add_str_if(snip, t[3], prefix)
`$3`!p
add_str(snip, '\n')
`
Returns:`!p
prefix = '\n' + get_indent(snip, shift=1)
add_str_if(snip, t[4], prefix)
`$4
"""
endsnippet

snippet Param "Parameters section" b
Parameters
----------
endsnippet

snippet Ret "Returns section" b
Returns
-------
endsnippet

snippet nf "numpy-style function docstring" b
"""$1`!p
indent = get_indent(snip, shift=0)
prefix = '\n\n' + indent
add_str_if(snip, t[2], prefix)
`$2`!p
add_str(snip, '\n')
`
Parameters
----------`!p
prefix = '\n' + get_indent(snip, shift=0)
add_str_if(snip, t[3], prefix)
`$3`!p
add_str(snip, '\n')
`
Returns
-------`!p
prefix = '\n' + get_indent(snip, shift=0)
add_str_if(snip, t[4], prefix)
`$4
"""
endsnippet

snippet nc "numpy-style class docstring" b
"""$1`!p
indent = get_indent(snip, shift=0)
prefix = '\n\n' + indent
add_str_if(snip, t[2], prefix)
`$2`!p
add_str(snip, '\n')
`
Attributes
----------`!p
prefix = '\n' + get_indent(snip, shift=0)
add_str_if(snip, t[3], prefix)
`$3`!p
add_str(snip, '\n')
`
"""
endsnippet

snippet def "function definition" b
def $1($2):
	${0:pass}
endsnippet

snippet adef "async function definition" b
async def $1($2):
	${0:pass}
endsnippet

snippet defs "instance method" b
def $1(self`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet adefs "async instance method" b
async def $1(self`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet defc "class method" b
def $1(cls`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet adefc "async class method" b
async def $1(cls`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet defm "metaclass method" b
def $1(meta`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet cls "class definition" b
class $1`!p
add_str_if(snip, t[2], "(")
`$2`!p
add_str_if(snip, t[2], ")")
`:
	${0:pass}
endsnippet

snippet cls2 "class definition py2 version" b
class $1(${2:object}):
	${0:pass}
endsnippet

snippet super "super() function" w
super($1`!p
add_str_if(snip, t[1], ", self")
refresh(snip)
`).$2($3)
endsnippet

snippet ExitStack "contextlib.ExitStack" b
with ExitStack() as stack:
	${0:pass}
endsnippet

priority 2
snippet "\*{2}" "**kwargs" ir
**kwargs
endsnippet

priority 3
snippet "\*{3}" "*args, **kwargs" ir
*args, **kwargs
endsnippet

priority 1

snippet "\*{1}" "*args" ir
*args
endsnippet


## __xxx__

snippet __all "__all__" b
__all__ = ($1)
endsnippet

snippet __author "author declaration" b
__author__ = 'Zhao Jiarong'
endsnippet

snippet __copyright "copyright declaration" b
__copyright__ = 'Copyright (C) `!p
import datetime
snip.rv += str(datetime.date.today().year)
` Zhao Jiarong. All rights reserved.'
endsnippet

snippet __init "__init__ method" b
def __init__(self`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	super().__init__()
	${0:pass}
endsnippet

snippet sinit "super().__init__()" b
super($1`!p
add_str_if(snip, t[1], ", self")
refresh(snip)
`).__init__($2)
endsnippet

snippet __new "__new__ method" b
def __new__(cls`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet __prepare_meta "__prepare__ method for meta class" b
@classmethod
def __prepare__(meta, name, bases, **kwargs):
	${0:pass}
endsnippet

snippet __new_meta "__new__ method for meta class" b
def __new__(meta, name, bases, namespace, **kwargs):
	${0:pass}
endsnippet

snippet __init_meta "__init__ method for meta class" b
def __init__(cls, name, bases, namespace):
	${0:pass}
endsnippet

snippet __enter "__enter__ method" b
def __enter__(self):
	${0:pass}
endsnippet

snippet __exit "__exit__ method" b
def __exit__(self, exc_type, exc_value, traceback):
	${0:pass}
endsnippet

snippet __del "__del__ method" b
def __del__(self):
	${0:pass}
endsnippet

snippet __call "__call__ method" b
def __call__(self`!p
add_str_if(snip, t[2], ", ")
refresh(snip)
`$2):
	${0:pass}
endsnippet

snippet __slots "__slots__ class variable" b
__slots__ = ($1)
endsnippet

snippet __repr "__repr__ method" b
def __repr__(self):
	${0:pass}
endsnippet

snippet __str "__str__ method" b
def __str__(self):
	${0:pass}
endsnippet

snippet __len "__len__ method" b
def __len__(self):
	${0:pass}
endsnippet

snippet __bool "__bool__ method" b
def __bool__(self):
	${0:pass}
endsnippet

snippet __iter "__iter__ method" b
def __iter__(self):
	${0:pass}
endsnippet

snippet __next "__next__ method" b
def __next__(self):
	${0:pass}
endsnippet

snippet __hash "__hash__ method" b
def __hash__(self):
	${0:pass}
endsnippet

snippet __eq "__eq__ method" b
def __eq__(self, other):
	${0:pass}
endsnippet

snippet __lt "__lt__ method" b
def __lt__(self, other):
	${0:pass}
endsnippet

snippet __contains "__contains__ method" b
def __contains__(self, item):
	${0:pass}
endsnippet

snippet __getattribute "__getattribute__ method" b
def __getattribute__(self, name):
	${0:pass}
endsnippet

snippet obj_getattr "object.__getattribute__()" i
object.__getattribute__(self, $1)
endsnippet

snippet __getattr "__getattr__ method" b
def __getattr__(self, name):
	${0:pass}
endsnippet

snippet __setattr "__setattr__ method" b
def __setattr__(self, name, value):
	${0:pass}
endsnippet

snippet __delattr "__delattr__ method" b
def __delattr__(self, name):
	${0:pass}
endsnippet

snippet __getitem "__getitem__ method" b
def __getitem__(self, key):
	${0:pass}
endsnippet

snippet __setitem "__setitem__ method" b
def __setitem__(self, key, value):
	${0:pass}
endsnippet

snippet __delitem "__delitem__ method" b
def __delitem__(self, key):
	${0:pass}
endsnippet

snippet __missing "__missing__ method" b
def __missing__(self, key):
	${0:pass}
endsnippet

# descriptor methods
snippet __get "__get__ method" b
def __get__(self, instance, owner):
	${0:pass}
endsnippet

snippet __set "__set__ method" b
def __set__(self, instance, value):
	${0:pass}
endsnippet

snippet __delete "__delete__ method" b
def __delete__(self, instance):
	${0:pass}
endsnippet

# pickle methods
snippet __setstate "__setstate__ method" b
def __setstate__(self, state):
	${0:pass}
endsnippet

snippet __getstate "__getstate__ method" b
def __getstate__(self):
	${0:pass}
endsnippet

snippet __reduce "__reduce__ method" b
def __reduce__(self):
	${0:pass}
endsnippet


## new file

snippet py3 "python 3 file template" b
#!/usr/bin/env python3
"""$1
"""
$2


$0

endsnippet

snippet py "python file template" b
#!/usr/bin/env python
"""$1
"""
$2


$0

endsnippet

snippet py2 "python 2 file template" b
#!/usr/bin/env python2
# encoding: utf-8
"""$1
"""
from __future__ import print_function, division, unicode_literals
from io import open
$2


$0

endsnippet

snippet py2-encoding "python 2 encoding" b
# encoding: utf-8
endsnippet

snippet py2-future "python 2 __future__ import" b
from __future__ import print_function, division, unicode_literals
endsnippet

snippet py2-io "python 2 io import" b
from io import open
endsnippet


## miscellaneous

snippet fixture "pytest fixture decorator" b
@pytest.fixture($1)
endsnippet

snippet license-agpl "AGPL license statement" b
# Copyright (C) `!p
import datetime
snip.rv += str(datetime.date.today().year)
` Zhao Jiarong <kawing.chiu.sysu at gmail dot com>
#
# This file is part of $1.
# 
# $1 is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
# 
# $1 is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with $1. If not, see <http://www.gnu.org/licenses/>.
endsnippet

